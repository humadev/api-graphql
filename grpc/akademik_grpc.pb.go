// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: akademik.proto

package akademik_pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AkademikServiceClient is the client API for AkademikService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AkademikServiceClient interface {
	// Metode RPC untuk Mahasiswa
	CreateMahasiswa(ctx context.Context, in *CreateMahasiswaRequest, opts ...grpc.CallOption) (*Mahasiswa, error)
	GetMahasiswa(ctx context.Context, in *GetMahasiswaRequest, opts ...grpc.CallOption) (*Mahasiswa, error)
	UpdateMahasiswa(ctx context.Context, in *UpdateMahasiswaRequest, opts ...grpc.CallOption) (*Mahasiswa, error)
	DeleteMahasiswa(ctx context.Context, in *DeleteMahasiswaRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	ListMahasiswa(ctx context.Context, in *ListMahasiswaRequest, opts ...grpc.CallOption) (*ListMahasiswaResponse, error)
	// Metode RPC untuk MataKuliah
	CreateMataKuliah(ctx context.Context, in *CreateMataKuliahRequest, opts ...grpc.CallOption) (*MataKuliah, error)
	GetMataKuliah(ctx context.Context, in *GetMataKuliahRequest, opts ...grpc.CallOption) (*MataKuliah, error)
	ListMataKuliah(ctx context.Context, in *ListMataKuliahRequest, opts ...grpc.CallOption) (*ListMataKuliahResponse, error)
	// Metode RPC untuk mendaftarkan mahasiswa ke mata kuliah (Edge)
	DaftarkanMataKuliahUntukMahasiswa(ctx context.Context, in *DaftarkanMataKuliahRequest, opts ...grpc.CallOption) (*Mahasiswa, error)
}

type akademikServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAkademikServiceClient(cc grpc.ClientConnInterface) AkademikServiceClient {
	return &akademikServiceClient{cc}
}

func (c *akademikServiceClient) CreateMahasiswa(ctx context.Context, in *CreateMahasiswaRequest, opts ...grpc.CallOption) (*Mahasiswa, error) {
	out := new(Mahasiswa)
	err := c.cc.Invoke(ctx, "/akademik.AkademikService/CreateMahasiswa", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *akademikServiceClient) GetMahasiswa(ctx context.Context, in *GetMahasiswaRequest, opts ...grpc.CallOption) (*Mahasiswa, error) {
	out := new(Mahasiswa)
	err := c.cc.Invoke(ctx, "/akademik.AkademikService/GetMahasiswa", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *akademikServiceClient) UpdateMahasiswa(ctx context.Context, in *UpdateMahasiswaRequest, opts ...grpc.CallOption) (*Mahasiswa, error) {
	out := new(Mahasiswa)
	err := c.cc.Invoke(ctx, "/akademik.AkademikService/UpdateMahasiswa", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *akademikServiceClient) DeleteMahasiswa(ctx context.Context, in *DeleteMahasiswaRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/akademik.AkademikService/DeleteMahasiswa", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *akademikServiceClient) ListMahasiswa(ctx context.Context, in *ListMahasiswaRequest, opts ...grpc.CallOption) (*ListMahasiswaResponse, error) {
	out := new(ListMahasiswaResponse)
	err := c.cc.Invoke(ctx, "/akademik.AkademikService/ListMahasiswa", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *akademikServiceClient) CreateMataKuliah(ctx context.Context, in *CreateMataKuliahRequest, opts ...grpc.CallOption) (*MataKuliah, error) {
	out := new(MataKuliah)
	err := c.cc.Invoke(ctx, "/akademik.AkademikService/CreateMataKuliah", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *akademikServiceClient) GetMataKuliah(ctx context.Context, in *GetMataKuliahRequest, opts ...grpc.CallOption) (*MataKuliah, error) {
	out := new(MataKuliah)
	err := c.cc.Invoke(ctx, "/akademik.AkademikService/GetMataKuliah", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *akademikServiceClient) ListMataKuliah(ctx context.Context, in *ListMataKuliahRequest, opts ...grpc.CallOption) (*ListMataKuliahResponse, error) {
	out := new(ListMataKuliahResponse)
	err := c.cc.Invoke(ctx, "/akademik.AkademikService/ListMataKuliah", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *akademikServiceClient) DaftarkanMataKuliahUntukMahasiswa(ctx context.Context, in *DaftarkanMataKuliahRequest, opts ...grpc.CallOption) (*Mahasiswa, error) {
	out := new(Mahasiswa)
	err := c.cc.Invoke(ctx, "/akademik.AkademikService/DaftarkanMataKuliahUntukMahasiswa", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AkademikServiceServer is the server API for AkademikService service.
// All implementations must embed UnimplementedAkademikServiceServer
// for forward compatibility
type AkademikServiceServer interface {
	// Metode RPC untuk Mahasiswa
	CreateMahasiswa(context.Context, *CreateMahasiswaRequest) (*Mahasiswa, error)
	GetMahasiswa(context.Context, *GetMahasiswaRequest) (*Mahasiswa, error)
	UpdateMahasiswa(context.Context, *UpdateMahasiswaRequest) (*Mahasiswa, error)
	DeleteMahasiswa(context.Context, *DeleteMahasiswaRequest) (*EmptyResponse, error)
	ListMahasiswa(context.Context, *ListMahasiswaRequest) (*ListMahasiswaResponse, error)
	// Metode RPC untuk MataKuliah
	CreateMataKuliah(context.Context, *CreateMataKuliahRequest) (*MataKuliah, error)
	GetMataKuliah(context.Context, *GetMataKuliahRequest) (*MataKuliah, error)
	ListMataKuliah(context.Context, *ListMataKuliahRequest) (*ListMataKuliahResponse, error)
	// Metode RPC untuk mendaftarkan mahasiswa ke mata kuliah (Edge)
	DaftarkanMataKuliahUntukMahasiswa(context.Context, *DaftarkanMataKuliahRequest) (*Mahasiswa, error)
	mustEmbedUnimplementedAkademikServiceServer()
}

// UnimplementedAkademikServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAkademikServiceServer struct {
}

func (UnimplementedAkademikServiceServer) CreateMahasiswa(context.Context, *CreateMahasiswaRequest) (*Mahasiswa, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMahasiswa not implemented")
}
func (UnimplementedAkademikServiceServer) GetMahasiswa(context.Context, *GetMahasiswaRequest) (*Mahasiswa, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMahasiswa not implemented")
}
func (UnimplementedAkademikServiceServer) UpdateMahasiswa(context.Context, *UpdateMahasiswaRequest) (*Mahasiswa, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMahasiswa not implemented")
}
func (UnimplementedAkademikServiceServer) DeleteMahasiswa(context.Context, *DeleteMahasiswaRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMahasiswa not implemented")
}
func (UnimplementedAkademikServiceServer) ListMahasiswa(context.Context, *ListMahasiswaRequest) (*ListMahasiswaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMahasiswa not implemented")
}
func (UnimplementedAkademikServiceServer) CreateMataKuliah(context.Context, *CreateMataKuliahRequest) (*MataKuliah, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMataKuliah not implemented")
}
func (UnimplementedAkademikServiceServer) GetMataKuliah(context.Context, *GetMataKuliahRequest) (*MataKuliah, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMataKuliah not implemented")
}
func (UnimplementedAkademikServiceServer) ListMataKuliah(context.Context, *ListMataKuliahRequest) (*ListMataKuliahResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMataKuliah not implemented")
}
func (UnimplementedAkademikServiceServer) DaftarkanMataKuliahUntukMahasiswa(context.Context, *DaftarkanMataKuliahRequest) (*Mahasiswa, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DaftarkanMataKuliahUntukMahasiswa not implemented")
}
func (UnimplementedAkademikServiceServer) mustEmbedUnimplementedAkademikServiceServer() {}

// UnsafeAkademikServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AkademikServiceServer will
// result in compilation errors.
type UnsafeAkademikServiceServer interface {
	mustEmbedUnimplementedAkademikServiceServer()
}

func RegisterAkademikServiceServer(s grpc.ServiceRegistrar, srv AkademikServiceServer) {
	s.RegisterService(&AkademikService_ServiceDesc, srv)
}

func _AkademikService_CreateMahasiswa_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMahasiswaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AkademikServiceServer).CreateMahasiswa(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/akademik.AkademikService/CreateMahasiswa",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AkademikServiceServer).CreateMahasiswa(ctx, req.(*CreateMahasiswaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AkademikService_GetMahasiswa_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMahasiswaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AkademikServiceServer).GetMahasiswa(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/akademik.AkademikService/GetMahasiswa",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AkademikServiceServer).GetMahasiswa(ctx, req.(*GetMahasiswaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AkademikService_UpdateMahasiswa_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMahasiswaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AkademikServiceServer).UpdateMahasiswa(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/akademik.AkademikService/UpdateMahasiswa",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AkademikServiceServer).UpdateMahasiswa(ctx, req.(*UpdateMahasiswaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AkademikService_DeleteMahasiswa_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMahasiswaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AkademikServiceServer).DeleteMahasiswa(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/akademik.AkademikService/DeleteMahasiswa",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AkademikServiceServer).DeleteMahasiswa(ctx, req.(*DeleteMahasiswaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AkademikService_ListMahasiswa_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMahasiswaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AkademikServiceServer).ListMahasiswa(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/akademik.AkademikService/ListMahasiswa",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AkademikServiceServer).ListMahasiswa(ctx, req.(*ListMahasiswaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AkademikService_CreateMataKuliah_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMataKuliahRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AkademikServiceServer).CreateMataKuliah(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/akademik.AkademikService/CreateMataKuliah",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AkademikServiceServer).CreateMataKuliah(ctx, req.(*CreateMataKuliahRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AkademikService_GetMataKuliah_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMataKuliahRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AkademikServiceServer).GetMataKuliah(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/akademik.AkademikService/GetMataKuliah",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AkademikServiceServer).GetMataKuliah(ctx, req.(*GetMataKuliahRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AkademikService_ListMataKuliah_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMataKuliahRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AkademikServiceServer).ListMataKuliah(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/akademik.AkademikService/ListMataKuliah",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AkademikServiceServer).ListMataKuliah(ctx, req.(*ListMataKuliahRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AkademikService_DaftarkanMataKuliahUntukMahasiswa_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DaftarkanMataKuliahRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AkademikServiceServer).DaftarkanMataKuliahUntukMahasiswa(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/akademik.AkademikService/DaftarkanMataKuliahUntukMahasiswa",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AkademikServiceServer).DaftarkanMataKuliahUntukMahasiswa(ctx, req.(*DaftarkanMataKuliahRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AkademikService_ServiceDesc is the grpc.ServiceDesc for AkademikService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AkademikService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "akademik.AkademikService",
	HandlerType: (*AkademikServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMahasiswa",
			Handler:    _AkademikService_CreateMahasiswa_Handler,
		},
		{
			MethodName: "GetMahasiswa",
			Handler:    _AkademikService_GetMahasiswa_Handler,
		},
		{
			MethodName: "UpdateMahasiswa",
			Handler:    _AkademikService_UpdateMahasiswa_Handler,
		},
		{
			MethodName: "DeleteMahasiswa",
			Handler:    _AkademikService_DeleteMahasiswa_Handler,
		},
		{
			MethodName: "ListMahasiswa",
			Handler:    _AkademikService_ListMahasiswa_Handler,
		},
		{
			MethodName: "CreateMataKuliah",
			Handler:    _AkademikService_CreateMataKuliah_Handler,
		},
		{
			MethodName: "GetMataKuliah",
			Handler:    _AkademikService_GetMataKuliah_Handler,
		},
		{
			MethodName: "ListMataKuliah",
			Handler:    _AkademikService_ListMataKuliah_Handler,
		},
		{
			MethodName: "DaftarkanMataKuliahUntukMahasiswa",
			Handler:    _AkademikService_DaftarkanMataKuliahUntukMahasiswa_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "akademik.proto",
}
